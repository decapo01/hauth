{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"rawPass",
				"rawPassword"
			],
			[
				"Ema",
				"EmailVerificationErrorInvalidCode"
			],
			[
				"verif",
				"email_verification_code"
			],
			[
				"findU",
				"findUserByAuth"
			],
			[
				"Ka",
				"KatipContext"
			],
			[
				"reg",
				"registeredEmail"
			]
		]
	},
	"buffers":
	[
		{
			"file": "src/Adapter/InMemory/Auth.hs",
			"settings":
			{
				"buffer_size": 6487,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "module Adapter.PostgreSQL.Auth where\n\nimport ClassyPrelude\nimport Data.Pool\nimport Database.PostgreSQL.Simple.Migration\nimport Database.PostgreSQL.Simple\nimport Data.Time\nimport qualified Domain.Auth as D\nimport Data.Has\nimport Text.StringRandom\n\ntype State = Pool Connection\n\ntype PG r m = (Has State r, MonadReader r m, MonadIO m, MonadThrow m)\n\ndata Config = Config {\n  configUrl                  :: ByteString,\n  configStripeCount          :: Int,\n  configMaxOpenConnPerStripe :: Int,\n  configIdleConnTimeout      :: NominalDiffTime\n}\n\n\nmigrate :: State -> IO ()\nmigrate pool = withResource pool $ \\conn -> do\n  result <- withTransaction conn (runMigrations False conn cmds)\n  case result of\n    MigrationError err -> throwString err\n    _ -> return ()\n  where\n    cmds = [\n      MigrationInitialization,\n      MigrationDirectory \"src/Adapter/PostgreSQL/Migrations\"]\n\nwithPool :: Config -> (State -> IO a) -> IO a\nwithPool cfg action =\n  bracket initPool cleanPool action\n  where\n    initPool = createPool openConn closeConn\n                (configStripeCount          cfg)\n                (configIdleConnTimeout      cfg)\n                (configMaxOpenConnPerStripe cfg)\n    cleanPool = destroyAllResources\n    openConn  = connectPostgreSQL (configUrl cfg)\n    closeConn = close\n\nwithState :: Config -> (State -> IO a) -> IO a\nwithState cfg action =\n  withPool cfg $ \\state -> do\n    migrate state\n    action  state\n\nwithConn :: PG r m => (Connection -> IO a) -> m a\nwithConn action = do\n  pool <- asks getter\n  liftIO . withResource pool $ \\conn -> action conn\n\ngenvCode :: Text -> IO Text\ngenvCode email = do\n  random <- stringRandomIO \"[A-Za-z0-9]{16}\"\n  return $ (tshow email) <> \"_\" <> random\n\naddAuth :: PG r m => D.Auth -> m (Either D.RegistrationError (D.UserId,D.VerificationCode))\naddAuth (D.Auth email pass) = do\n  let rawEmail = D.rawEmail email\n      rawPassw = D.rawPassword pass\n  vCode  <- liftIO $ genvCode rawEmail\n  result <- withConn $ \\conn ->\n    try $ query conn qry (rawEmail,rawPassw,vCode)\n  case result of\n    Right [Only uId] -> return $ Right (uId,vCode)\n    Right _          -> throwString \"Should not happen: PG doesn't return userId\"\n    Left err@SqlError{sqlState = state, sqlErrorMsg = msg} ->\n      if state == \"23505\" && \"auths_email_key\" `isInfixOf` msg then\n        return $ Left D.RegistrationErrorEmailTaken\n      else\n        throwString $ \"Unhandled PG exception:\" <> show err\n  where\n    qry = \"insert into auths \\\n          \\(email,pass,email_verification_code,is_email_verified) \\\n          \\values (?, crypt(?,gen_salt('bf')),?,?) returning id\"\n\n\nsetEmailAsVerified :: PG r m => D.VerificationCode -> m (Either D.EmailVerificationError (D.UserId, D.Email))\nsetEmailAsVerified vCode = do\n  result <- withConn $ \\conn ->\n    query conn qry (Only vCode)\n  case result of\n    [(uId,email)] -> return $ makeEmail uId email\n    _             -> return $ Left  D.EmailVerificationErrorInvalidCode\n  where\n    qry = \"update auths set is_email_verified = true where email_verification_code = ?\"\n    makeEmail uId email =\n      case D.mkEmail email of\n        Right e -> Right (uId,e)\n        _       -> Left  D.EmailVerificationErrorInvalidCode\n\n-- my attempt without book...does not compile\n-- setEmailAsVerified  :: PG r m => D.VerificationCode -> m (Either D.EmailVerificationError (D.UserId,D.Email))\n-- setEmailAsVerified vCode = do\n  -- authRes <- liftIO $ findAuthByVcode vCode\n  -- case authRes of\n    -- Left e     -> return $ Left D.EmailVerificationErrorInvalidCode\n    -- Right [Only (uId,email)] -> do\n      -- res2 <- liftIO $ updateAuthAsVerified email\n      -- case res2 of\n        -- Left  e -> return $ Left D.EmailVerificationErrorInvalidCode\n        -- Right _ -> return $ Right (uId,email) \n  -- where\n    -- findAuthByVcode vCode =\n      -- withConn $ \\conn ->\n        -- try $ query conn qry (vCode)\n    -- qry = \"select id,email from auths where email_verification_code = ? \"\n    -- updateAuthAsVerified email =\n      -- withConn $ \\conn ->\n        -- try $ query conn qry2 (email)\n    -- qry2 = \"update \\\n           -- \\  auths \\\n           -- \\set\\\n           -- \\  is_email_verified = true \\\n           -- \\where\\\n           -- \\  email = ?\"\n\n-- my attempt\nfindUserByAuth :: (PG r m) => D.Auth -> m (Maybe (D.UserId, Bool))\nfindUserByAuth auth = do\n  res <- withConn $ \\conn ->\n    query conn qry (email,passw)\n  return $\n    case res of\n      [(uId,isVerified)] -> Just (uId,isVerified)\n      _                  -> Nothing\n  where\n    qry   = \"select id, is_email_verified from auths where email = ? and pass = crypt(?,pass)\"\n    email = D.rawEmail    $ D.authEmail    auth\n    passw = D.rawPassword $ D.authPassword auth\n\n\n-- my attempt\nfindEmailFromUserId :: (PG r m) => D.UserId -> m (Maybe D.Email)\nfindEmailFromUserId uId = do\n  res <- withConn $ \\conn ->\n    query conn qry (Only uId)\n  case res of\n    [Only email] -> return $ createEmail email\n    _            -> return $ Nothing\n  where\n    qry = \"select cast(email as text) from auths where id = ?\"\n    createEmail email =\n      case (D.mkEmail email) of\n        Right e -> Just e\n        _       -> Nothing\n",
			"file": "src/Adapter/PostgreSQL/Auth.hs",
			"file_size": 5139,
			"file_write_time": 131994274165473768,
			"settings":
			{
				"buffer_size": 5139,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "decapo@notebook:~/apps/haskell/hauth$ fish                                   \nWelcome to fish, the friendly interactive shell\ndecapo at notebook in ~/a/h/hauth (chapter_05|✚3)                            \n» ghcid \"--command=stack repl\" -o ghcid.txt                                   \nLoading stack repl ...\nhauth-0.1.0.0: initial-build-steps (lib + exe)\nThe following GHC options are incompatible with GHCi and have not been passed ​‌​\nto it: -threaded\nConfiguring GHCi with the following packages: hauth\nUsing main module: 1. Package `hauth' component exe:hauth-exe with main-is fil​‌​\ne: /home/decapo/apps/haskell/hauth/app/Main.hs\nGHCi, version 8.2.2: http://www.haskell.org/ghc/  :? for help\n[1 of 6] Compiling Domain.Validation ( /home/decapo/apps/haskell/hauth/src/Dom​‌​\nain/Validation.hs, interpreted )\n[2 of 6] Compiling Domain.Auth      ( /home/decapo/apps/haskell/hauth/src/Doma​‌​\nin/Auth.hs, interpreted )\n[3 of 6] Compiling Adapter.PostgreSQL.Auth ( /home/decapo/apps/haskell/hauth/s​‌​\nrc/Adapter/PostgreSQL/Auth.hs, interpreted )\n\n/home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs:85:28: warning:​‌​\n [-Wdeprecations]\n    In the use of ‘undefined’ (imported from ClassyPrelude):\n    Deprecated: \"It is highly recommended that you either avoid partial functi​‌​\nons or provide meaningful error messages\"\n   |\n85 | setEmailAsVerified vCode = undefined\n   |                            ^^^^^^^^^\n\n/home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs:88:18: warning:​‌​\n [-Wdeprecations]\n    In the use of ‘undefined’ (imported from ClassyPrelude):\n    Deprecated: \"It is highly recommended that you either avoid partial functi​‌​\nons or provide meaningful error messages\"\n   |\n88 | findUserByAuth = undefined\n   |                  ^^^^^^^^^\n\n/home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs:91:23: warning:​‌​\n [-Wdeprecations]\n    In the use of ‘undefined’ (imported from ClassyPrelude):\n    Deprecated: \"It is highly recommended that you either avoid partial functi​‌​\nons or provide meaningful error messages\"\n   |\n91 | findEmailFromUserId = undefined\n   |                       ^^^^^^^^^\n[4 of 6] Compiling Adapter.InMemory.Auth ( /home/decapo/apps/haskell/hauth/src​‌​\n/Adapter/InMemory/Auth.hs, interpreted )\n[5 of 6] Compiling Lib              ( /home/decapo/apps/haskell/hauth/src/Lib.​‌​\nhs, interpreted )\n\n/home/decapo/apps/haskell/hauth/src/Lib.hs:52:22: warning: [-Wdeprecations]\n    In the use of ‘undefined’ (imported from ClassyPrelude):\n    Deprecated: \"It is highly recommended that you either avoid partial functi​‌​\nons or provide meaningful error messages\"\n   |\n52 |   let email = either undefined id $ mkEmail \"ecky@test.com\"\n   |                      ^^^^^^^^^\n\n/home/decapo/apps/haskell/hauth/src/Lib.hs:53:22: warning: [-Wdeprecations]\n    In the use of ‘undefined’ (imported from ClassyPrelude):\n    Deprecated: \"It is highly recommended that you either avoid partial functi​‌​\nons or provide meaningful error messages\"\n   |\n53 |       passw = either undefined id $ mkPassword \"1234ABCDefgh\"\n   |                      ^^^^^^^^^\n[6 of 6] Compiling Main             ( /home/decapo/apps/haskell/hauth/app/Main​‌​\n.hs, interpreted )\nOk, six modules loaded.\nLoaded GHCi configuration from /tmp/haskell-stack-ghci/2f33b306/ghci-script\n\n/home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs:85:28: \nwarning: [-Wdeprecations]\n    In the use of ‘undefined’ (imported from ClassyPrelude):\n    Deprecated: \"It is highly recommended that you either avoid partial \nfunctions or provide meaningful error messages\"\n   |\n85 | setEmailAsVerified vCode = undefined\n   |                            ^^^^^^^^^\n/home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs:88:18: \nwarning: [-Wdeprecations]\nReloading...\n  /home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs\n\n\n\n\n\n\n\n\n/home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs:88:33-56: \nerror:\n    Not in scope: data constructor ‘D.EmailVerificationError’\n    Module ‘Domain.Auth’ does not export ‘EmailVerificationError’.\n   |\n88 |     Left e     -> return $ Left D.EmailVerificationError\n   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^\n/home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs:91:34-57: \nerror:\n    Not in scope: data constructor ‘D.EmailVerificationError’\nReloading...\n  /home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs\n\n\n\n\n\n\n\n\n/home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs:(89,19)-(92,44): error:\n    • Couldn't match type ‘Either D.EmailVerificationError b2’\n                     with ‘(D.UserId, D.Email)’\n      Expected type: m (Either\n                          D.EmailVerificationError (D.UserId, D.Email))\n        Actual type: m (Either\n                          D.EmailVerificationError (Either D.EmailVerificationError b2))\n    • In the expression:\n        return\n          $ case (updateAuthAsVerified auth) of\nReloading...\n  /home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs\n\n\n\n\n\n\n\n\n/home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs:(89,19)-(92,44): error:\n    • Couldn't match type ‘Either D.EmailVerificationError b3’\n                     with ‘(D.UserId, D.Email)’\n      Expected type: m (Either\n                          D.EmailVerificationError (D.UserId, D.Email))\n        Actual type: m (Either\n                          D.EmailVerificationError (Either D.EmailVerificationError b3))\n    • In the expression:\n        return\n          $ case (updateAuthAsVerified auth) of\nReloading...\n  /home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs\n\n\n\n\n\n\n\n\n/home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs:(89,19)-(92,53): error:\n    • Couldn't match type ‘Either\n                             D.EmailVerificationError (Integer, b2)’\n                     with ‘(D.UserId, D.Email)’\n      Expected type: m (Either\n                          D.EmailVerificationError (D.UserId, D.Email))\n        Actual type: m (Either\n                          D.EmailVerificationError\n                          (Either D.EmailVerificationError (Integer, b2)))\n    • In the expression:\nReloading...\n  /home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs\n\n\n\n\n\n\n\n/home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs:(89,26)-(92,53): error:\n    • Couldn't match type ‘Either\n                             D.EmailVerificationError (Integer, b2)’\n                     with ‘(D.UserId, D.Email)’\n      Expected type: m (Either\n                          D.EmailVerificationError (D.UserId, D.Email))\n        Actual type: m (Either\n                          D.EmailVerificationError\n                          (Either D.EmailVerificationError (Integer, b2)))\nReloading...\n  /home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs\n\n\n\n\n\n\n\n\n/home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs:(89,26)-(92,53): error:\n    • Couldn't match type ‘Either\n                             D.EmailVerificationError (Integer, b2)’\n                     with ‘(D.UserId, D.Email)’\n      Expected type: m (Either\n                          D.EmailVerificationError (D.UserId, D.Email))\n        Actual type: m (Either\n                          D.EmailVerificationError\n                          (Either D.EmailVerificationError (Integer, b2)))\n    • In the expression:\nReloading...\n  /home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs\n\n\n\n\n\n\n\n/home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs:(89,26)-(93,53): error:\n    • Couldn't match type ‘IO’ with ‘Either D.EmailVerificationError’\n      Expected type: m (Either\n                          D.EmailVerificationError (D.UserId, D.Email))\n        Actual type: m (IO\n                          (Either D.EmailVerificationError (Integer, b0)))\n    • In the expression:\n        return\n          $ do res2 <- updateAuthAsVerified auth\nReloading...\n  /home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs\n\n\n\n\n\n\n\n/home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs:(89,33)-(93,45): error:\n    • Couldn't match type ‘IO’ with ‘Either D.EmailVerificationError’\n      Expected type: m (Either\n                          D.EmailVerificationError (D.UserId, D.Email))\n        Actual type: m (IO (Either D.EmailVerificationError (a0, b0)))\n    • In the expression:\n        return\n          $ do res2 <- updateAuthAsVerified auth\n               case res2 of\nReloading...\n  /home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs\n\n\n\n\n\n\n\n/home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs:(89,33)-(93,45): error:\n    • Couldn't match type ‘IO’ with ‘Either D.EmailVerificationError’\n      Expected type: m (Either\n                          D.EmailVerificationError (D.UserId, D.Email))\n        Actual type: m (IO (Either D.EmailVerificationError (a0, b0)))\n    • In the expression:\n        return\n          $ do res2 <- updateAuthAsVerified email\n               case res2 of\nReloading...\n  /home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs\n\n\n\n\n\n\n\n/home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs:(89,33)-(93,45): error:\n    • Couldn't match type ‘Either D.EmailVerificationError (a1, b0)’\n                     with ‘(D.UserId, D.Email)’\n      Expected type: m (Either\n                          D.EmailVerificationError (D.UserId, D.Email))\n        Actual type: m (Either\n                          D.EmailVerificationError\n                          (Either D.EmailVerificationError (a1, b0)))\n    • In the expression:\nReloading...\n  /home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs\n\n\n\n\n\n\n\n/home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs:(89,33)-(93,45): error:\n    • Couldn't match type ‘Either D.EmailVerificationError (a0, b0)’\n                     with ‘(D.UserId, D.Email)’\n      Expected type: m (Either\n                          D.EmailVerificationError (D.UserId, D.Email))\n        Actual type: m (Either\n                          D.EmailVerificationError\n                          (Either D.EmailVerificationError (a0, b0)))\n    • In the expression:\nReloading...\n  /home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs\n\n\n\n\n\n\n\n/home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs:(89,33)-(93,45): error:\n    • Couldn't match type ‘Either D.EmailVerificationError (a0, b0)’\n                     with ‘(D.UserId, D.Email)’\n      Expected type: m (Either\n                          D.EmailVerificationError (D.UserId, D.Email))\n        Actual type: m (Either\n                          D.EmailVerificationError\n                          (Either D.EmailVerificationError (a0, b0)))\n    • In the expression:\nReloading...\n  /home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs\n\n\n\n\n\n\n\n\n\n\n\n/home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs:(87,3)-(90,10): error:\n    Parse error in pattern: case authRes of\n                              Left e -> return $ Left D.EmailVerificationErrorInvalidCode\n                              Right [Only (uId, email)] -> return $ res2\n    Possibly caused by a missing 'do'?\n   |\n87 |   case authRes of\n   |   ^^^^^^^^^^^^^^^...\n/home/decapo/apps/haskell/hauth/src/Lib.hs:52:22: warning: [-Wdeprecations]\n    In the use of ‘undefined’ (imported from ClassyPrelude):\n    Deprecated: \"It is highly recommended that you either avoid partial functions or provide \nmeaningful error messages\"\n   |\nReloading...\n  /home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs\n\n\n\n\n\n\n\n\n\n\n\n/home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs:(89,33)-(93,45): error:\n    • Couldn't match type ‘Either D.EmailVerificationError (a0, b0)’\n                     with ‘(D.UserId, D.Email)’\n      Expected type: m (Either\n                          D.EmailVerificationError (D.UserId, D.Email))\n        Actual type: m (Either\n                          D.EmailVerificationError\n                          (Either D.EmailVerificationError (a0, b0)))\n    • In the expression:\n        return\n          $ do res2 <- updateAuthAsVerified email\n               case res2 of\n                 Left e -> return $ Left D.EmailVerificationErrorInvalidCode\nReloading...\n  /home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs\n\n\n\n\n\n\n\n\n\n\n\n/home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs:(89,33)-(93,45): error:\n    • Couldn't match type ‘Either D.EmailVerificationError (a0, b0)’\n                     with ‘(D.UserId, D.Email)’\n      Expected type: m (Either\n                          D.EmailVerificationError (D.UserId, D.Email))\n        Actual type: m (Either\n                          D.EmailVerificationError\n                          (Either D.EmailVerificationError (a0, b0)))\n    • In the expression:\n        return\n          $ do res2 <- liftIO $ updateAuthAsVerified email\n               case res2 of\n                 Left e -> return $ Left D.EmailVerificationErrorInvalidCode\nReloading...\n  /home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs\n\n\n\n\n\n\n\n\n\n\n\n/home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs:(89,33)-(93,39): error:\n    • Couldn't match type ‘D.EmailVerificationError’\n                     with ‘(D.UserId, D.Email)’\n      Expected type: m (Either\n                          D.EmailVerificationError (D.UserId, D.Email))\n        Actual type: m (Either\n                          D.EmailVerificationError D.EmailVerificationError)\n    • In the expression:\n        return\n          $ do res2 <- liftIO $ updateAuthAsVerified email\n               case res2 of\n                 Left e -> return $ D.EmailVerificationErrorInvalidCode\n                 Right _ -> return $ (uId, email)\nReloading...\n  /home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs\n\n\n\n\n\n\n\n\n\n/home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs:92:20-63: error:\n    • Couldn't match type ‘D.EmailVerificationError’\n                     with ‘Either D.EmailVerificationError (D.UserId, D.Email)’\n      Expected type: m (Either\n                          D.EmailVerificationError (D.UserId, D.Email))\n        Actual type: m D.EmailVerificationError\n    • In the expression: return $ D.EmailVerificationErrorInvalidCode\n      In a case alternative:\n          Left e -> return $ D.EmailVerificationErrorInvalidCode\n      In a stmt of a 'do' block:\n        case res2 of\nReloading...\n  /home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs\n\n\n\n\n\n\n\n\n\n/home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs:89:33: error:\n    parse error on input ‘$’\n   |\n89 |     Right [Only (uId,email)] -> $ do\n   |                                 ^\n/home/decapo/apps/haskell/hauth/src/Lib.hs:52:22: warning: [-Wdeprecations]\n    In the use of ‘undefined’ (imported from ClassyPrelude):\n    Deprecated: \"It is highly recommended that you either avoid partial functions or provide \nmeaningful error messages\"\n   |\n52 |   let email = either undefined id $ mkEmail \"ecky@test.com\"\nReloading...\n  /home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs\n\n\n\n\n\n\n\n\n\n\n\n/home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs:92:20-63: error:\n    • Couldn't match type ‘D.EmailVerificationError’\n                     with ‘Either D.EmailVerificationError (D.UserId, D.Email)’\n      Expected type: m (Either\n                          D.EmailVerificationError (D.UserId, D.Email))\n        Actual type: m D.EmailVerificationError\n    • In the expression: return $ D.EmailVerificationErrorInvalidCode\n      In a case alternative:\n          Left e -> return $ D.EmailVerificationErrorInvalidCode\n      In a stmt of a 'do' block:\n        case res2 of\n          Left e -> return $ D.EmailVerificationErrorInvalidCode\n          Right _ -> return $ (uId, email)\nReloading...\n  /home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs\n\n\n\n\n\n\n\n\n\n/home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs:(87,3)-(90,10): error:\n    Parse error in pattern: case authRes of\n                              Left e -> return $ Left D.EmailVerificationErrorInvalidCode\n                              Right [Only (uId, email)] -> res2\n    Possibly caused by a missing 'do'?\n   |\n87 |   case authRes of\n   |   ^^^^^^^^^^^^^^^...\n/home/decapo/apps/haskell/hauth/src/Lib.hs:52:22: warning: [-Wdeprecations]\n    In the use of ‘undefined’ (imported from ClassyPrelude):\n    Deprecated: \"It is highly recommended that you either avoid partial functions or provide \nReloading...\n  /home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs\n\n\n\n\n\n\n\n\n\n\n\n/home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs:92:20-63: error:\n    • Couldn't match type ‘D.EmailVerificationError’\n                     with ‘Either D.EmailVerificationError (D.UserId, D.Email)’\n      Expected type: m (Either\n                          D.EmailVerificationError (D.UserId, D.Email))\n        Actual type: m D.EmailVerificationError\n    • In the expression: return $ D.EmailVerificationErrorInvalidCode\n      In a case alternative:\n          Left e -> return $ D.EmailVerificationErrorInvalidCode\n      In a stmt of a 'do' block:\n        case res2 of\n          Left e -> return $ D.EmailVerificationErrorInvalidCode\n          Right _ -> return $ (uId, email)\nReloading...\n  /home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs\n\n\n\n\n\n\n\n\n\n\n\n/home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs:(96,7)-(97,36): error:\n    • Could not deduce (Has State r2) arising from a use of ‘withConn’\n      from the context: PG r m\n        bound by the type signature for:\n                   setEmailAsVerified :: forall r (m :: * -> *).\n                                         PG r m =>\n                                         D.VerificationCode\n                                         -> m (Either D.EmailVerificationError (D.UserId, \nD.Email))\n        at /home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs:84:1-109\n      The type variable ‘r2’ is ambiguous\n      These potential instances exist:\n        instance [safe] Has a a -- Defined in ‘Data.Has’\nReloading...\n  /home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs\n\n\n\n\n\n\n\n\n\n/home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs:86:23-43: error:\n    • Could not deduce (Exception e1)\n        arising from a use of ‘findAuthByVcode’\n      from the context: PG r m\n        bound by the type signature for:\n                   setEmailAsVerified :: forall r (m :: * -> *).\n                                         PG r m =>\n                                         D.VerificationCode\n                                         -> m (Either D.EmailVerificationError (D.UserId, \nD.Email))\n        at /home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs:84:1-109\nReloading...\n  /home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs\n\n\n\n\n\n\n\n\n\n\n\n/home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs:111:18-26: warning: \n[-Wdeprecations]\n    In the use of ‘undefined’ (imported from ClassyPrelude):\n    Deprecated: \"It is highly recommended that you either avoid partial functions or provide \nmeaningful error messages\"\n    |\n111 | findUserByAuth = undefined\n    |                  ^^^^^^^^^\n/home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs:114:23-31: warning: \n[-Wdeprecations]\n    In the use of ‘undefined’ (imported from ClassyPrelude):\n    Deprecated: \"It is highly recommended that you either avoid partial functions or provide \nmeaningful error messages\"\nReloading...\n  /home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs\n\n\n\n\n\n\n\n\n\n/home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs:86:10-11: error:\n    parse error on input ‘<-’\n    Perhaps this statement should be within a 'do' block?\n   |\n86 |   result <- liftIO $ withConn $ \\conn ->\n   |          ^^\n/home/decapo/apps/haskell/hauth/src/Lib.hs:52:22: warning: [-Wdeprecations]\n    In the use of ‘undefined’ (imported from ClassyPrelude):\n    Deprecated: \"It is highly recommended that you either avoid partial functions or provide \nmeaningful error messages\"\n   |\nReloading...\n  /home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs\n\n\n\n\n\n\n\n\n\n\n\n/home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs:84:91-96: error:\n    Not in scope: type constructor or class ‘UserId’\n    Perhaps you meant ‘D.UserId’ (imported from Domain.Auth)\n   |\n84 | setEmailAsVerified :: PG r m => D.VerificationCode -> m (Either D.EmailVerificationError \n(UserId, D.Email))\n   |                                                                                           \n^^^^^^\n/home/decapo/apps/haskell/hauth/src/Lib.hs:52:22: warning: [-Wdeprecations]\n    In the use of ‘undefined’ (imported from ClassyPrelude):\n    Deprecated: \"It is highly recommended that you either avoid partial functions or provide \nmeaningful error messages\"\n   |\nReloading...\n  /home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs\n\n\n\n\n\n\n\n\n\n\n\n/home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs:84:91-96: error:\n    Not in scope: type constructor or class ‘UserId’\n    Perhaps you meant ‘D.UserId’ (imported from Domain.Auth)\n   |\n84 | setEmailAsVerified :: PG r m => D.VerificationCode -> m (Either D.EmailVerificationError \n(UserId, D.Email))\n   |                                                                                           \n^^^^^^\n/home/decapo/apps/haskell/hauth/src/Lib.hs:52:22: warning: [-Wdeprecations]\n    In the use of ‘undefined’ (imported from ClassyPrelude):\n    Deprecated: \"It is highly recommended that you either avoid partial functions or provide \nmeaningful error messages\"\n   |\nReloading...\n  /home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs\n\n\n\n\n\n\n\n\n\n\n\n/home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs:84:91-96: error:\n    Not in scope: type constructor or class ‘UserId’\n    Perhaps you meant ‘D.UserId’ (imported from Domain.Auth)\n   |\n84 | setEmailAsVerified :: PG r m => D.VerificationCode -> m (Either D.EmailVerificationError \n(UserId, D.Email))\n   |                                                                                           \n^^^^^^\n/home/decapo/apps/haskell/hauth/src/Lib.hs:52:22: warning: [-Wdeprecations]\n    In the use of ‘undefined’ (imported from ClassyPrelude):\n    Deprecated: \"It is highly recommended that you either avoid partial functions or provide \nmeaningful error messages\"\n   |\nReloading...\n  /home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs\n\n\n\n\n\n\n\n\n\n\n\n/home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs:84:91-96: error:\n    Not in scope: type constructor or class ‘UserId’\n    Perhaps you meant ‘D.UserId’ (imported from Domain.Auth)\n   |\n84 | setEmailAsVerified :: PG r m => D.VerificationCode -> m (Either D.EmailVerificationError \n(UserId, D.Email))\n   |                                                                                           \n^^^^^^\n/home/decapo/apps/haskell/hauth/src/Lib.hs:52:22: warning: [-Wdeprecations]\n    In the use of ‘undefined’ (imported from ClassyPrelude):\n    Deprecated: \"It is highly recommended that you either avoid partial functions or provide \nmeaningful error messages\"\n   |\nReloading...\n  /home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs\n\n\n\n\n\n\n\n\n\n\n\n/home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs:84:91-96: error:\n    Not in scope: type constructor or class ‘UserId’\n    Perhaps you meant ‘D.UserId’ (imported from Domain.Auth)\n   |\n84 | setEmailAsVerified :: PG r m => D.VerificationCode -> m (Either D.EmailVerificationError \n(UserId, D.Email))\n   |                                                                                           \n^^^^^^\n/home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs:95:27-34: error:\n    Not in scope: data constructor ‘D.UserId’\n    Module ‘Domain.Auth’ does not export ‘UserId’.\n   |\n95 |         Right e -> Right (D.UserId uId,e)\nReloading...\n  /home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs\n\n\n\n\n\n\n\n\n\n\n\n/home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs:84:91-96: error:\n    Not in scope: type constructor or class ‘UserId’\n    Perhaps you meant ‘D.UserId’ (imported from Domain.Auth)\n   |\n84 | setEmailAsVerified :: PG r m => D.VerificationCode -> m (Either D.EmailVerificationError \n(UserId, D.Email))\n   |                                                                                           \n^^^^^^\n/home/decapo/apps/haskell/hauth/src/Lib.hs:52:22: warning: [-Wdeprecations]\n    In the use of ‘undefined’ (imported from ClassyPrelude):\n    Deprecated: \"It is highly recommended that you either avoid partial functions or provide \nmeaningful error messages\"\n   |\nReloading...\n  /home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs\n\n\n\n\n\n\n\n\n\n\n\n/home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs:94:12-18: error:\n    • Variable not in scope: mkEmail :: t -> Either a0 b\n    • Perhaps you meant one of these:\n        ‘D.mkEmail’ (imported from Domain.Auth),\n        data constructor ‘D.Email’ (imported from Domain.Auth)\n   |\n94 |       case mkEmail email of\n   |            ^^^^^^^\n/home/decapo/apps/haskell/hauth/src/Lib.hs:52:22: warning: [-Wdeprecations]\n    In the use of ‘undefined’ (imported from ClassyPrelude):\n    Deprecated: \"It is highly recommended that you either avoid partial functions or provide \nmeaningful error messages\"\n   |\nReloading...\n  /home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs\n\n\n\n\n\n\n\n\n\n\n\n/home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs:(86,22)-(87,31): error:\n    • Could not deduce (Has State r0) arising from a use of ‘withConn’\n      from the context: PG r m\n        bound by the type signature for:\n                   setEmailAsVerified :: forall r (m :: * -> *).\n                                         PG r m =>\n                                         D.VerificationCode\n                                         -> m (Either D.EmailVerificationError (D.UserId, \nD.Email))\n        at /home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs:84:1-109\n      The type variable ‘r0’ is ambiguous\n      These potential instances exist:\n        instance [safe] Has a a -- Defined in ‘Data.Has’\nReloading...\n  /home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs\n\n\n\n\n\n\n\n\n\n\n\n/home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs:125:18-26: warning: \n[-Wdeprecations]\n    In the use of ‘undefined’ (imported from ClassyPrelude):\n    Deprecated: \"It is highly recommended that you either avoid partial functions or provide \nmeaningful error messages\"\n    |\n125 | findUserByAuth = undefined\n    |                  ^^^^^^^^^\n/home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs:128:23-31: warning: \n[-Wdeprecations]\n    In the use of ‘undefined’ (imported from ClassyPrelude):\n    Deprecated: \"It is highly recommended that you either avoid partial functions or provide \nmeaningful error messages\"\nReloading...\n  /home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs\n\n\n\n\n\n\n\n\n\n\n\n/home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs:(126,3)-(127,31): error:\n    The last statement in a 'do' block must be an expression\n      res <- withConn $ \\ conn -> query conn qry (Only email)\n    |\n126 |   res <- withConn $ \\conn ->\n    |   ^^^^^^^^^^^^^^^^^^^^^^^^^^...\n/home/decapo/apps/haskell/hauth/src/Lib.hs:52:22: warning: [-Wdeprecations]\n    In the use of ‘undefined’ (imported from ClassyPrelude):\n    Deprecated: \"It is highly recommended that you either avoid partial functions or provide \nmeaningful error messages\"\n   |\n52 |   let email = either undefined id $ mkEmail \"ecky@test.com\"\n   |                      ^^^^^^^^^\nReloading...\n  /home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs\n\n\n\n\n\n\n\n\n\n\n\n/home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs:(126,3)-(127,31): error:\n    The last statement in a 'do' block must be an expression\n      res <- withConn $ \\ conn -> query conn qry (Only email)\n    |\n126 |   res <- withConn $ \\conn ->\n    |   ^^^^^^^^^^^^^^^^^^^^^^^^^^...\n/home/decapo/apps/haskell/hauth/src/Lib.hs:52:22: warning: [-Wdeprecations]\n    In the use of ‘undefined’ (imported from ClassyPrelude):\n    Deprecated: \"It is highly recommended that you either avoid partial functions or provide \nmeaningful error messages\"\n   |\n52 |   let email = either undefined id $ mkEmail \"ecky@test.com\"\n   |                      ^^^^^^^^^\nReloading...\n  /home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs\n\n\n\n\n\n\n\n\n\n\n\n/home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs:124:41-66: error:\n    • Expecting one fewer arguments to ‘m’\n      Expected kind ‘* -> *’, but ‘m’ has kind ‘*’\n    • In the type signature:\n        findUserByAuth :: (PG m n) => D.Auth -> m (Maybe (D.UserId, Bool))\n    |\n124 | findUserByAuth :: (PG m n) => D.Auth -> m (Maybe (D.UserId, Bool))\n    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n/home/decapo/apps/haskell/hauth/src/Lib.hs:52:22: warning: [-Wdeprecations]\n    In the use of ‘undefined’ (imported from ClassyPrelude):\n    Deprecated: \"It is highly recommended that you either avoid partial functions or provide \nmeaningful error messages\"\n   |\nReloading...\n  /home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs\n\n\n\n\n\n\n\n\n\n\n\n/home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs:127:5-31: error:\n    • Could not deduce (Database.PostgreSQL.Simple.ToField.ToField\n                          D.Email)\n        arising from a use of ‘query’\n      from the context: PG r m\n        bound by the type signature for:\n                   findUserByAuth :: forall r (m :: * -> *).\n                                     PG r m =>\n                                     D.Auth -> m (Maybe (D.UserId, Bool))\n        at /home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs:124:1-66\n    • In the expression: query conn qry (Only email)\n      In the second argument of ‘($)’, namely\n        ‘\\ conn -> query conn qry (Only email)’\nReloading...\n  /home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs\n\n\n\n\n\n\n\n\n\n\n\n/home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs:127:5-26: error:\n    • Could not deduce (ToRow D.Email) arising from a use of ‘query’\n      from the context: PG r m\n        bound by the type signature for:\n                   findUserByAuth :: forall r (m :: * -> *).\n                                     PG r m =>\n                                     D.Auth -> m (Maybe (D.UserId, Bool))\n        at /home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs:124:1-66\n    • In the expression: query conn qry (email)\n      In the second argument of ‘($)’, namely\n        ‘\\ conn -> query conn qry (email)’\n      In a stmt of a 'do' block:\n        res <- withConn $ \\ conn -> query conn qry (email)\nReloading...\n  /home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs\n\n\n\n\n\n\n\n\n\n\n\n/home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs:133:24-27: error:\n    • Couldn't match expected type ‘D.Email’ with actual type ‘D.Auth’\n    • In the first argument of ‘D.rawEmail’, namely ‘auth’\n      In the expression: D.rawEmail auth\n      In an equation for ‘email’: email = D.rawEmail auth\n    |\n133 |     email = D.rawEmail auth\n    |                        ^^^^\n/home/decapo/apps/haskell/hauth/src/Lib.hs:52:22: warning: [-Wdeprecations]\n    In the use of ‘undefined’ (imported from ClassyPrelude):\n    Deprecated: \"It is highly recommended that you either avoid partial functions or provide \nmeaningful error messages\"\n   |\nReloading...\n  /home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs\n\n\n\n\n\n\n\n\n\n\n\n/home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs:127:5-26: error:\n    • Could not deduce (ToRow Text) arising from a use of ‘query’\n      from the context: PG r m\n        bound by the type signature for:\n                   findUserByAuth :: forall r (m :: * -> *).\n                                     PG r m =>\n                                     D.Auth -> m (Maybe (D.UserId, Bool))\n        at /home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs:124:1-66\n    • In the expression: query conn qry (email)\n      In the second argument of ‘($)’, namely\n        ‘\\ conn -> query conn qry (email)’\n      In a stmt of a 'do' block:\n        res <- withConn $ \\ conn -> query conn qry (email)\nReloading...\n  /home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs\n\n\n\n\n\n\n\n\n\n\n\n/home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs:127:5-26: error:\n    • Could not deduce (ToRow Text) arising from a use of ‘query’\n      from the context: PG r m\n        bound by the type signature for:\n                   findUserByAuth :: forall r (m :: * -> *).\n                                     PG r m =>\n                                     D.Auth -> m (Maybe (D.UserId, Bool))\n        at /home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs:124:1-66\n    • In the expression: query conn qry (email)\n      In the second argument of ‘($)’, namely\n        ‘\\ conn -> query conn qry (email)’\n      In a stmt of a 'do' block:\n        res <- withConn $ \\ conn -> query conn qry (email)\nReloading...\n  /home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs\n\n\n\n\n\n\n\n\n\n/home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs:127:5-34: error:\n    • Could not deduce (ToRow Text) arising from a use of ‘query’\n      from the context: PG r m\n        bound by the type signature for:\n                   findUserByAuth :: forall r (m :: * -> *).\n                                     PG r m =>\n                                     D.Auth -> m (Maybe (D.UserId, Bool))\n        at /home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs:124:1-66\n    • In the expression: query conn qry (email :: Text)\n      In the second argument of ‘($)’, namely\n        ‘\\ conn -> query conn qry (email :: Text)’\nReloading...\n  /home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs\n\n\n\n\n\n\n\n\n\n\n\n/home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs:136:23-31: warning: \n[-Wdeprecations]\n    In the use of ‘undefined’ (imported from ClassyPrelude):\n    Deprecated: \"It is highly recommended that you either avoid partial functions or provide \nmeaningful error messages\"\n    |\n136 | findEmailFromUserId = undefined\n    |                       ^^^^^^^^^\n/home/decapo/apps/haskell/hauth/src/Lib.hs:52:22: warning: [-Wdeprecations]\n    In the use of ‘undefined’ (imported from ClassyPrelude):\n    Deprecated: \"It is highly recommended that you either avoid partial functions or provide \nmeaningful error messages\"\n   |\nReloading...\n  /home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs\n\n\n\n\n\n\n\n\n\n\n\n/home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs:136:23-31: warning: \n[-Wdeprecations]\n    In the use of ‘undefined’ (imported from ClassyPrelude):\n    Deprecated: \"It is highly recommended that you either avoid partial functions or provide \nmeaningful error messages\"\n    |\n136 | findEmailFromUserId = undefined\n    |                       ^^^^^^^^^\n/home/decapo/apps/haskell/hauth/src/Lib.hs:52:22: warning: [-Wdeprecations]\n    In the use of ‘undefined’ (imported from ClassyPrelude):\n    Deprecated: \"It is highly recommended that you either avoid partial functions or provide \nmeaningful error messages\"\n   |\nReloading...\n  /home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs\n\n\n\n\n\n\n\n\n\n/home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs:129:5-8: error:\n    parse error on input ‘case’\n    |\n129 |     case res of\n    |     ^^^^\n/home/decapo/apps/haskell/hauth/src/Lib.hs:52:22: warning: [-Wdeprecations]\n    In the use of ‘undefined’ (imported from ClassyPrelude):\n    Deprecated: \"It is highly recommended that you either avoid partial functions or provide \nmeaningful error messages\"\n   |\n52 |   let email = either undefined id $ mkEmail \"ecky@test.com\"\nReloading...\n  /home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs\n\n\n\n\n\n\n\n\n\n\n\n/home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs:137:23-31: warning: \n[-Wdeprecations]\n    In the use of ‘undefined’ (imported from ClassyPrelude):\n    Deprecated: \"It is highly recommended that you either avoid partial functions or provide \nmeaningful error messages\"\n    |\n137 | findEmailFromUserId = undefined\n    |                       ^^^^^^^^^\n/home/decapo/apps/haskell/hauth/src/Lib.hs:52:22: warning: [-Wdeprecations]\n    In the use of ‘undefined’ (imported from ClassyPrelude):\n    Deprecated: \"It is highly recommended that you either avoid partial functions or provide \nmeaningful error messages\"\n   |\nReloading...\n  /home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs\n\n\n\n\n\n\n\n\n\n\n\n/home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs:138:23-31: warning: \n[-Wdeprecations]\n    In the use of ‘undefined’ (imported from ClassyPrelude):\n    Deprecated: \"It is highly recommended that you either avoid partial functions or provide \nmeaningful error messages\"\n    |\n138 | findEmailFromUserId = undefined\n    |                       ^^^^^^^^^\n/home/decapo/apps/haskell/hauth/src/Lib.hs:52:22: warning: [-Wdeprecations]\n    In the use of ‘undefined’ (imported from ClassyPrelude):\n    Deprecated: \"It is highly recommended that you either avoid partial functions or provide \nmeaningful error messages\"\n   |\nReloading...\n  /home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs\n\n\n\n\n\n\n\n\n\n\n\n/home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs:127:5-42: error:\n    • Could not deduce (Database.PostgreSQL.Simple.ToField.ToField\n                          (Only Text))\n        arising from a use of ‘query’\n      from the context: PG r m\n        bound by the type signature for:\n                   findUserByAuth :: forall r (m :: * -> *).\n                                     PG r m =>\n                                     D.Auth -> m (Maybe (D.UserId, Bool))\n        at /home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs:124:1-66\n    • In the expression: query conn qry (Only email, Only passw)\n      In the second argument of ‘($)’, namely\n        ‘\\ conn -> query conn qry (Only email, Only passw)’\nReloading...\n  /home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs\n\n\n\n\n\n\n\n\n\n\n\n/home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs:138:23-31: warning: \n[-Wdeprecations]\n    In the use of ‘undefined’ (imported from ClassyPrelude):\n    Deprecated: \"It is highly recommended that you either avoid partial functions or provide \nmeaningful error messages\"\n    |\n138 | findEmailFromUserId = undefined\n    |                       ^^^^^^^^^\n/home/decapo/apps/haskell/hauth/src/Lib.hs:52:22: warning: [-Wdeprecations]\n    In the use of ‘undefined’ (imported from ClassyPrelude):\n    Deprecated: \"It is highly recommended that you either avoid partial functions or provide \nmeaningful error messages\"\n   |\nReloading...\n  /home/decapo/apps/haskell/hauth/src/Adapter/Postgre​‌​\nSQL/Auth.hs\n\n\n\n\n\n\n\n\n\n/home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQ​‌​\nL/Auth.hs:138:23-31: warning: [-Wdeprecations]\n    In the use of ‘undefined’ (imported from \nClassyPrelude):\n    Deprecated: \"It is highly recommended that you \neither avoid partial functions or provide \nmeaningful error messages\"\n    |\n138 | findEmailFromUserId = undefined\n    |                       ^^^^^^^^^\n/home/decapo/apps/haskell/hauth/src/Lib.hs:52:22: \nwarning: [-Wdeprecations]\nReloading...\n  /home/decapo/apps/haskell/hauth/src/Adapter/Postgre​‌​\nSQL/Auth.hs\n\n\n\n\n\n\n\n\n\n/home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQ\nL/Auth.hs:138:23-31: warning: [-Wdeprecations]\n    In the use of ‘undefined’ (imported from \nClassyPrelude):\n    Deprecated: \"It is highly recommended that you \neither avoid partial functions or provide \nmeaningful error messages\"\n    |\n138 | findEmailFromUserId = undefined\n    |                       ^^^^^^^^^\n/home/decapo/apps/haskell/hauth/src/Lib.hs:52:22: \nwarning: [-Wdeprecations]\nReloading...\n  /home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs\n\n\n\n\n\n\n\n\n\n\n\n/home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs:140:5-29: error:\n    • Could not deduce (FromRow Text) arising from a use of ‘query’\n      from the context: PG r m\n        bound by the type signature for:\n                   findEmailFromUserId :: forall r (m :: * -> *).\n                                          PG r m =>\n                                          D.UserId -> m (Maybe D.Email)\n        at /home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs:137:1-62\n    • In the expression: query conn qry (Only uId)\n      In the second argument of ‘($)’, namely\n        ‘\\ conn -> query conn qry (Only uId)’\n      In a stmt of a 'do' block:\n        res <- withConn $ \\ conn -> query conn qry (Only uId)\nReloading...\n  /home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs\n\n\n\n\n\n\n\n\n\n\n\n/home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs:142:5-29: error:\n    • Could not deduce (FromRow Text) arising from a use of ‘query’\n      from the context: PG r m\n        bound by the type signature for:\n                   findEmailFromUserId :: forall r (m :: * -> *).\n                                          PG r m =>\n                                          D.UserId -> m (Maybe D.Email)\n        at /home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs:139:1-62\n    • In the expression: query conn qry (Only uId)\n      In the second argument of ‘($)’, namely\n        ‘\\ conn -> query conn qry (Only uId)’\n      In a stmt of a 'do' block:\n        res <- withConn $ \\ conn -> query conn qry (Only uId)\nReloading...\n  /home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs\n\n\n\n\n\n\n\n\n\n\n\n/home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs:142:5-24: error:\n    • Could not deduce (FromRow Text) arising from a use of ‘query’\n      from the context: PG r m\n        bound by the type signature for:\n                   findEmailFromUserId :: forall r (m :: * -> *).\n                                          PG r m =>\n                                          D.UserId -> m (Maybe D.Email)\n        at /home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs:139:1-62\n    • In the expression: query conn qry (uId)\n      In the second argument of ‘($)’, namely\n        ‘\\ conn -> query conn qry (uId)’\n      In a stmt of a 'do' block:\n        res <- withConn $ \\ conn -> query conn qry (uId)\nReloading...\n  /home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs\n\n\n\n\n\n\n\n\n\n\n\n/home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs:142:5-24: error:\n    • Could not deduce (FromRow Text) arising from a use of ‘query’\n      from the context: PG r m\n        bound by the type signature for:\n                   findEmailFromUserId :: forall r (m :: * -> *).\n                                          PG r m =>\n                                          D.UserId -> m (Maybe D.Email)\n        at /home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs:139:1-64\n    • In the expression: query conn qry (uId)\n      In the second argument of ‘($)’, namely\n        ‘\\ conn -> query conn qry (uId)’\n      In a stmt of a 'do' block:\n        res <- withConn $ \\ conn -> query conn qry (uId)\nReloading...\n  /home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs\n\n\n\n\n\n\n\n\n\n\n\n/home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs:142:5-29: error:\n    • Could not deduce (FromRow Text) arising from a use of ‘query’\n      from the context: PG r m\n        bound by the type signature for:\n                   findEmailFromUserId :: forall r (m :: * -> *).\n                                          PG r m =>\n                                          D.UserId -> m (Maybe D.Email)\n        at /home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs:139:1-64\n    • In the expression: query conn qry (Only uId)\n      In the second argument of ‘($)’, namely\n        ‘\\ conn -> query conn qry (Only uId)’\n      In a stmt of a 'do' block:\n        res <- withConn $ \\ conn -> query conn qry (Only uId)\nReloading...\n  /home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs\n\n\n\n\n\n\n\n\n\n\n\n/home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs:142:5-29: error:\n    • Could not deduce (FromRow Text) arising from a use of ‘query’\n      from the context: PG r m\n        bound by the type signature for:\n                   findEmailFromUserId :: forall r (m :: * -> *).\n                                          PG r m =>\n                                          D.UserId -> m (Maybe D.Email)\n        at /home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs:139:1-64\n    • In the expression: query conn qry (Only uId)\n      In the second argument of ‘($)’, namely\n        ‘\\ conn -> query conn qry (Only uId)’\n      In a stmt of a 'do' block:\n        res <- withConn $ \\ conn -> query conn qry (Only uId)\nReloading...\n  /home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs\n\n\n\n\n\n\n\n\n\n\n\n/home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs:142:5-29: error:\n    • Could not deduce (FromRow Text) arising from a use of ‘query’\n      from the context: PG r m\n        bound by the type signature for:\n                   findEmailFromUserId :: forall r (m :: * -> *).\n                                          PG r m =>\n                                          D.UserId -> m (Maybe D.Email)\n        at /home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs:139:1-64\n    • In the expression: query conn qry (Only uId)\n      In the second argument of ‘($)’, namely\n        ‘\\ conn -> query conn qry (Only uId)’\n      In a stmt of a 'do' block:\n        res <- withConn $ \\ conn -> query conn qry (Only uId)\nReloading...\n  /home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs\n\n\n\n\n\n\n\n\n\n\n\n/home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs:142:21-28: error:\n    • Couldn't match expected type ‘Int’\n                  with actual type ‘Only D.UserId’\n    • In the third argument of ‘query’, namely ‘(Only uId :: Int)’\n      In the expression: query conn qry (Only uId :: Int)\n      In the second argument of ‘($)’, namely\n        ‘\\ conn -> query conn qry (Only uId :: Int)’\n    |\n142 |     query conn qry (Only uId :: Int)\n    |                     ^^^^^^^^\n/home/decapo/apps/haskell/hauth/src/Lib.hs:52:22: warning: [-Wdeprecations]\n    In the use of ‘undefined’ (imported from ClassyPrelude):\n    Deprecated: \"It is highly recommended that you either avoid partial functions or provide \nReloading...\n  /home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs\n\n\n\n\n\n\n\n\n\n\n\n/home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs:142:5-31: error:\n    • Could not deduce (FromRow Text) arising from a use of ‘query’\n      from the context: PG r m\n        bound by the type signature for:\n                   findEmailFromUserId :: forall r (m :: * -> *).\n                                          PG r m =>\n                                          D.UserId -> m (Maybe D.Email)\n        at /home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs:139:1-64\n    • In the expression: query conn qry (uId :: Int)\n      In the second argument of ‘($)’, namely\n        ‘\\ conn -> query conn qry (uId :: Int)’\n      In a stmt of a 'do' block:\n        res <- withConn $ \\ conn -> query conn qry (uId :: Int)\nReloading...\n  /home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs\n\n\n\n\n\n\n\n\n\n\n\n/home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs:142:5-29: error:\n    • Could not deduce (FromRow Text) arising from a use of ‘query’\n      from the context: PG r m\n        bound by the type signature for:\n                   findEmailFromUserId :: forall r (m :: * -> *).\n                                          PG r m =>\n                                          D.UserId -> m (Maybe D.Email)\n        at /home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs:139:1-64\n    • In the expression: query conn qry (Only uId)\n      In the second argument of ‘($)’, namely\n        ‘\\ conn -> query conn qry (Only uId)’\n      In a stmt of a 'do' block:\n        res <- withConn $ \\ conn -> query conn qry (Only uId)\nReloading...\n  /home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs\n\n\n\n\n\n\n\n\n\n\n\n/home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs:142:5-29: error:\n    • Could not deduce (FromRow Text) arising from a use of ‘query’\n      from the context: PG r m\n        bound by the type signature for:\n                   findEmailFromUserId :: forall r (m :: * -> *).\n                                          PG r m =>\n                                          D.UserId -> m (Maybe D.Email)\n        at /home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs:139:1-64\n    • In the expression: query conn qry (Only uId)\n      In the second argument of ‘($)’, namely\n        ‘\\ conn -> query conn qry (Only uId)’\n      In a stmt of a 'do' block:\n        res <- withConn $ \\ conn -> query conn qry (Only uId)\nReloading...\n  /home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs\n\n\n\n\n\n\n\n\n\n\n\n/home/decapo/apps/haskell/hauth/src/Lib.hs:52:22: warning: [-Wdeprecations]\n    In the use of ‘undefined’ (imported from ClassyPrelude):\n    Deprecated: \"It is highly recommended that you either avoid partial functions or provide \nmeaningful error messages\"\n   |\n52 |   let email = either undefined id $ mkEmail \"ecky@test.com\"\n   |                      ^^^^^^^^^\n/home/decapo/apps/haskell/hauth/src/Lib.hs:53:22: warning: [-Wdeprecations]\n    In the use of ‘undefined’ (imported from ClassyPrelude):\n    Deprecated: \"It is highly recommended that you either avoid partial functions or provide \nmeaningful error messages\"\n   |\n53 |       passw = either undefined id $ mkPassword \"1234ABCDefgh\"\nReloading...\n  /home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs\n\n\n\n\n\n\n\n\n\n\n\n/home/decapo/apps/haskell/hauth/src/Lib.hs:52:22: warning: [-Wdeprecations]\n    In the use of ‘undefined’ (imported from ClassyPrelude):\n    Deprecated: \"It is highly recommended that you either avoid partial functions or provide \nmeaningful error messages\"\n   |\n52 |   let email = either undefined id $ mkEmail \"ecky@test.com\"\n   |                      ^^^^^^^^^\n/home/decapo/apps/haskell/hauth/src/Lib.hs:53:22: warning: [-Wdeprecations]\n    In the use of ‘undefined’ (imported from ClassyPrelude):\n    Deprecated: \"It is highly recommended that you either avoid partial functions or provide \nmeaningful error messages\"\n   |\n53 |       passw = either undefined id $ mkPassword \"1234ABCDefgh\"\nReloading...\n  /home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs\n\n\n\n\n\n\n\n\n\n\n\n/home/decapo/apps/haskell/hauth/src/Lib.hs:52:22: warning: [-Wdeprecations]\n    In the use of ‘undefined’ (imported from ClassyPrelude):\n    Deprecated: \"It is highly recommended that you either avoid partial functions or provide \nmeaningful error messages\"\n   |\n52 |   let email = either undefined id $ mkEmail \"ecky@test.com\"\n   |                      ^^^^^^^^^\n/home/decapo/apps/haskell/hauth/src/Lib.hs:53:22: warning: [-Wdeprecations]\n    In the use of ‘undefined’ (imported from ClassyPrelude):\n    Deprecated: \"It is highly recommended that you either avoid partial functions or provide \nmeaningful error messages\"\n   |\n53 |       passw = either undefined id $ mkPassword \"1234ABCDefgh\"\nReloading...\n  /home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs\n\n\n\n\n\n\n\n\n\n\n\n/home/decapo/apps/haskell/hauth/src/Lib.hs:52:22: warning: [-Wdeprecations]\n    In the use of ‘undefined’ (imported from ClassyPrelude):\n    Deprecated: \"It is highly recommended that you either avoid partial functions or provide \nmeaningful error messages\"\n   |\n52 |   let email = either undefined id $ mkEmail \"ecky@test.com\"\n   |                      ^^^^^^^^^\n/home/decapo/apps/haskell/hauth/src/Lib.hs:53:22: warning: [-Wdeprecations]\n    In the use of ‘undefined’ (imported from ClassyPrelude):\n    Deprecated: \"It is highly recommended that you either avoid partial functions or provide \nmeaningful error messages\"\n   |\n53 |       passw = either undefined id $ mkPassword \"1234ABCDefgh\"\nReloading...\n  /home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Auth.hs\n\n\n\n\n\n\n\n\n\n\n\n/home/decapo/apps/haskell/hauth/src/Lib.hs:52:22: warning: [-Wdeprecations]\n    In the use of ‘undefined’ (imported from ClassyPrelude):\n    Deprecated: \"It is highly recommended that you either avoid partial functions or provide \nmeaningful error messages\"\n   |\n52 |   let email = either undefined id $ mkEmail \"ecky@test.com\"\n   |                      ^^^^^^^^^\n/home/decapo/apps/haskell/hauth/src/Lib.hs:53:22: warning: [-Wdeprecations]\n    In the use of ‘undefined’ (imported from ClassyPrelude):\n    Deprecated: \"It is highly recommended that you either avoid partial functions or provide \nmeaningful error messages\"\n   |\n53 |       passw = either undefined id $ mkPassword \"1234ABCDefgh\"^C⏎                                   ​‌​\ndecapo at notebook in ~/a/h/hauth (chapter_05|✚3)                                                       \n» git add .                                                                                             \ndecapo at notebook in ~/a/h/hauth (chapter_05|●3)                                                       \n» git commit -m \"got main pg repo implementation functions compiling\"                                   \n[chapter_05 3b0b024] got main pg repo implementation functions compiling\n 3 files changed, 773 insertions(+), 557 deletions(-)\n rewrite hauth.sublime-workspace (71%)\ndecapo at notebook in ~/a/h/hauth (chapter_05|✔)                                                        \n» git checkout dev                                                                                      \nSwitched to branch 'dev'\ndecapo at notebook in ~/a/h/hauth (dev|✔)                                                               \n» git merge chapter_05                                                                                  \nUpdating e883a6b..3b0b024\nFast-forward\n ghcid.txt                                         |  10 +-\n hauth.sublime-workspace                           | 284 ++++++++++++++++++++++++++++++++++++----------\n package.yaml                                      |   3 +\n src/Adapter/PostgreSQL/Auth.hs                    | 152 +++++++++++++++++++++++++\n src/Adapter/PostgreSQL/Migrations/00000_auths.sql |  13 +++\n stack.yaml                                        |   2 +-\n 6 files changed, 404 insertions(+), 60 deletions(-)\n create mode 100644 src/Adapter/PostgreSQL/Auth.hs\n create mode 100644 src/Adapter/PostgreSQL/Migrations/00000_auths.sql\ndecapo at notebook in ~/a/h/hauth (dev|✔)                                                               \n» git checkout master                                                                                   \nSwitched to branch 'master'\ndecapo at notebook in ~/a/h/hauth (master|✔)                                                            \n» git merge dev                                                                                         \nUpdating e883a6b..3b0b024\nFast-forward\n ghcid.txt                                         |  10 +-\n hauth.sublime-workspace                           | 284 ++++++++++++++++++++++++++++++++++++----------\n package.yaml                                      |   3 +\n src/Adapter/PostgreSQL/Auth.hs                    | 152 +++++++++++++++++++++++++\n src/Adapter/PostgreSQL/Migrations/00000_auths.sql |  13 +++\n stack.yaml                                        |   2 +-\n 6 files changed, 404 insertions(+), 60 deletions(-)\n create mode 100644 src/Adapter/PostgreSQL/Auth.hs\n create mode 100644 src/Adapter/PostgreSQL/Migrations/00000_auths.sql\ndecapo at notebook in ~/a/h/hauth (master|✔)                                                            \n» git push --all origin                                                                                 \nUsername for 'https://github.com': decapo01\nPassword for 'https://decapo01@github.com': \nCounting objects: 8, done.\nDelta compression using up to 8 threads.\nCompressing objects: 100% (8/8), done.\nWriting objects: 100% (8/8), 17.19 KiB | 5.73 MiB/s, done.\nTotal 8 (delta 3), reused 0 (delta 0)\nremote: Resolving deltas: 100% (3/3), completed with 3 local objects.                                   \nTo https://github.com/decapo01/hauth.git\n   f6ad2e1..3b0b024  chapter_05 -> chapter_05\n   e883a6b..3b0b024  dev -> dev\n   e883a6b..3b0b024  master -> master\ndecapo at notebook in ~/a/h/hauth (master|✔)                                                            \n» ",
			"settings":
			{
				"buffer_size": 56308,
				"line_ending": "Unix",
				"name": "2 warnings - hauth",
				"scratch": true
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"packa",
				"Package Control: Install Package"
			],
			[
				"show whit",
				"SublimeHaskell: Show/hide all types"
			],
			[
				"side",
				"View: Toggle Side Bar"
			],
			[
				"side ",
				"View: Toggle Side Bar"
			],
			[
				"toggl",
				"View: Toggle Side Bar"
			],
			[
				"Package ",
				"Package Control: Install Package"
			],
			[
				"Terminus",
				"Terminus Utilities: Select Theme"
			],
			[
				"pa",
				"Package Control: Install Package"
			],
			[
				"toggle si",
				"View: Toggle Side Bar"
			],
			[
				"file",
				"View: Toggle Open Files in Side Bar"
			],
			[
				"sid",
				"View: Toggle Side Bar"
			],
			[
				"terminus: open ",
				"Terminus: Open Default Shell in View"
			],
			[
				"terminus: to",
				"Terminus: Toggle Panel"
			],
			[
				"terminus: pan",
				"Terminus: Open Default Shell in Panel"
			],
			[
				"toggle term",
				"Terminus: Toggle Panel"
			],
			[
				"terminu",
				"Terminus: Toggle Panel"
			],
			[
				"Packa",
				"Package Control: Install Package"
			],
			[
				"package Control: sear",
				"Package Control: Discover Packages"
			],
			[
				"font",
				"Preferences: Package Control Settings – User"
			],
			[
				"Color",
				"UI: Select Color Scheme"
			],
			[
				"package ",
				"Package Control: Install Package"
			],
			[
				"Term",
				"Terminal: Open"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 206.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/decapo/apps/haskell/hauth",
		"/home/decapo/apps/haskell/hauth/src",
		"/home/decapo/apps/haskell/hauth/src/Adapter"
	],
	"file_history":
	[
		"/home/decapo/apps/haskell/hauth/package.yaml",
		"/home/decapo/apps/haskell/hauth/src/Adapter/PostgreSQL/Migrations/00000_auths.sql",
		"/home/decapo/apps/haskell/hauth/src/Domain/Auth.hs",
		"/home/decapo/apps/haskell/hauth/src/Lib.hs",
		"/home/decapo/apps/haskell/hauth/stack.yaml",
		"/home/decapo/.config/sublime-text-3/Packages/User/SublimeOnSaveBuild.sublime-settings",
		"/home/decapo/.config/sublime-text-3/Packages/User/Terminal.sublime-settings",
		"/home/decapo/apps/haskell/hauth/README.md",
		"/home/decapo/.config/sublime-text-3/Packages/User/Package Control.sublime-settings"
	],
	"find":
	{
		"height": 32.0
	},
	"find_in_files":
	{
		"height": 116.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"setEmailAsVerified",
			"katipAddNamspace",
			"findEmailFromUserId"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "src/Adapter/InMemory/Auth.hs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6487,
						"regions":
						{
						},
						"selection":
						[
							[
								3875,
								3875
							]
						],
						"settings":
						{
							"subhask_project_dir": "/home/decapo/apps/haskell/hauth",
							"subhask_project_name": "hauth",
							"syntax": "Packages/Haskell/Haskell.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 371.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "src/Adapter/PostgreSQL/Auth.hs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5139,
						"regions":
						{
						},
						"selection":
						[
							[
								5138,
								5138
							]
						],
						"settings":
						{
							"subhask_project_dir": "/home/decapo/apps/haskell/hauth",
							"subhask_project_name": "hauth",
							"syntax": "Packages/SublimeHaskell/Syntaxes/ST2-tmLanguages/Haskell-SublimeHaskell.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3039.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		},
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 2,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 56308,
						"regions":
						{
						},
						"selection":
						[
							[
								56308,
								56308
							]
						],
						"settings":
						{
							"__vi_external_disable": true,
							"auto_complete": false,
							"auto_complete_commit_on_tab": false,
							"bracket_highlighter.clone_locations":
							{
							},
							"bracket_highlighter.ignore": true,
							"caret_style": "blink",
							"color_scheme": "Terminus.sublime-color-scheme",
							"draw_centered": false,
							"draw_indent_guides": false,
							"draw_white_space": "none",
							"gutter": false,
							"highlight_line": false,
							"is_widget": true,
							"scroll_past_end": true,
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"terminus.highlight_counter": 923,
							"terminus_view": true,
							"terminus_view.args":
							{
								"auto_close": true,
								"cmd":
								[
									"/bin/bash",
									"-i",
									"-l"
								],
								"cwd": "/home/decapo/apps/haskell/hauth",
								"env":
								{
									"LANG": "en_US.UTF-8",
									"TERM": "linux",
									"TERMINUS_SUBLIME": "1",
									"TERM_PROGRAM": "Terminus-Sublime"
								},
								"panel_name": null,
								"tag": null,
								"title": "Login Shell"
							},
							"terminus_view.key.ctrl+k": true,
							"terminus_view.key.ctrl+p": true,
							"terminus_view.natural_keyboard": true,
							"terminus_view.panel_name": null,
							"terminus_view.tag": null,
							"terminus_view.viewport_y": 40679.9601196,
							"word_wrap": false
						},
						"translation.x": 0.0,
						"translation.y": 40802.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 32.0
	},
	"input":
	{
		"height": 47.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				0,
				1,
				1,
				2
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			0.673579256535,
			1.0
		]
	},
	"menu_visible": true,
	"output.Terminus":
	{
		"height": 202.0
	},
	"output.Terminus 2":
	{
		"height": 168.0
	},
	"output.exec":
	{
		"height": 84.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.sublime_haskell_output_panel":
	{
		"height": 168.0
	},
	"pinned_build_system": "Packages/User/haskell-ghcid.sublime-build",
	"project": "hauth.sublime-project",
	"replace":
	{
		"height": 60.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"Auth",
				"src/Domain/Auth.hs"
			],
			[
				"sta",
				"stack.yaml"
			],
			[
				"pa",
				"package.yaml"
			],
			[
				"Lib",
				"src/Lib.hs"
			],
			[
				"LIb",
				"src/Lib.hs"
			],
			[
				"pack",
				"package.yaml"
			],
			[
				"re",
				"README.md"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 393.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 594.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": false,
	"side_bar_width": 245.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
